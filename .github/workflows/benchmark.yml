---
name: Continuous Benchmarking

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  benchmark:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for comparison

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run benchmark checks
        id: benchmark
        uses: bobheadxi/gobenchdata@v1
        with:
          CHECKS: true
          CHECKS_CONFIG: gobenchdata-checks.yml
          PUBLISH_REPO: ${{ github.repository }}
          PUBLISH_BRANCH: gh-pages
          GO_TEST_FLAGS: -benchmem -count=5 -timeout=5m
          GO_BENCHMARKS: .
          GO_TEST_PKGS: ./...
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find existing benchmark comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '📊 Benchmark Results'

      - name: Create benchmark comment body
        id: comment-body
        run: |
          cat > benchmark_comment.md << 'EOF'
          ## 📊 Benchmark Results

          Automated benchmark comparison between `main` and this PR:

          ### Performance Check Results
          
          EOF
          
          # Check if the gobenchdata action produced results
          if [ -f checks-results ]; then
            echo "**Check Summary:**" >> benchmark_comment.md
            echo "" >> benchmark_comment.md
            
            # Parse the checks results and create a formatted summary
            if grep -q "PASSED CHECKS" checks-results; then
              PASSED=$(grep "PASSED CHECKS" checks-results | head -1 | awk '{print $5}')
              FAILED=$(grep "FAILED CHECKS" checks-results | head -1 | awk '{print $7}')
              TOTAL=$(grep "TOTAL" checks-results | head -1 | awk '{print $9}')
              
              if [ "$FAILED" = "0" ]; then
                echo "✅ All benchmark checks passed! ($PASSED/$TOTAL)" >> benchmark_comment.md
              else
                echo "❌ Some benchmark checks failed! ($FAILED/$TOTAL failed)" >> benchmark_comment.md
              fi
              echo "" >> benchmark_comment.md
            fi
            
            echo "**Detailed Results:**" >> benchmark_comment.md
            echo '```' >> benchmark_comment.md
            cat checks-results >> benchmark_comment.md
            echo '```' >> benchmark_comment.md
          else
            echo "⚠️ No benchmark results available. This might be the first benchmark run or there may be no baseline data to compare against." >> benchmark_comment.md
            echo "" >> benchmark_comment.md
            echo "To establish baseline data, benchmarks need to be run on the main branch first." >> benchmark_comment.md
          fi
          
          echo "" >> benchmark_comment.md
          echo "📈 **How to interpret the results:**" >> benchmark_comment.md
          echo "- **Negative values** indicate performance improvements 🚀" >> benchmark_comment.md
          echo "- **Positive values** indicate performance regressions 🐌" >> benchmark_comment.md
          echo "- **✅** indicates the change is within acceptable thresholds" >> benchmark_comment.md
          echo "- **❌** indicates the change exceeds acceptable thresholds" >> benchmark_comment.md
          echo "" >> benchmark_comment.md
          echo "_Generated by continuous benchmarking workflow using [gobenchdata](https://github.com/bobheadxi/gobenchdata)_" >> benchmark_comment.md
          
          # Output the comment body for the next step
          {
            echo "comment_body<<EOF"
            cat benchmark_comment.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create or update benchmark comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.comment-body.outputs.comment_body }}
          edit-mode: replace
